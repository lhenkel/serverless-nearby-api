# serverless.yml

service: find-nearby

package:
  individually: true
  exclude:
    - data/*
    - local/*

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-nearby

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  environment:
    tableName: ${self:custom.tableName}  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      #  - dynamodb:UpdateItem
      #  - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ GeoTable, Arn ]
        - { "Fn::Join": [ "/", [ 
          { "Fn::GetAtt": ["GeoTable", "Arn" ] }, "index", "geohash-index" 
          ]]}
functions:
  # Defines an HTTP API endpoint that calls the main function in find.js
  # - path: url path is /find
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  find:
    handler: find.main
    events:
      - http:
          path: find
          method: post
          cors: true
          authorizer: aws_iam          

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
